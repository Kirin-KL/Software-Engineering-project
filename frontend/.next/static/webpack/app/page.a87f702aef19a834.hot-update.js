"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api)\n/* harmony export */ });\nconst API_URL = \"http://localhost:8080/api\" || 0;\nconst api = {\n    async register (data) {\n        console.log('Sending registration request to:', \"\".concat(API_URL, \"/v1/auth/register\"));\n        console.log('Registration data:', {\n            ...data,\n            password: '***'\n        });\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/auth/register\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            console.log('Response status:', response.status);\n            const responseData = await response.json();\n            console.log('Response data:', responseData);\n            if (!response.ok) {\n                throw new Error(responseData.detail || 'Ошибка при регистрации');\n            }\n            return responseData;\n        } catch (error) {\n            console.error('Registration error:', error);\n            throw error;\n        }\n    },\n    async login (data) {\n        console.log('Sending login request to:', \"\".concat(API_URL, \"/v1/auth/login\"));\n        console.log('Login data:', {\n            ...data,\n            password: '***'\n        });\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/auth/login\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            console.log('Response status:', response.status);\n            const responseData = await response.json();\n            console.log('Response data:', responseData);\n            if (!response.ok) {\n                throw new Error(responseData.detail || 'Ошибка при входе');\n            }\n            if (responseData.access_token) {\n                localStorage.setItem('access_token', responseData.access_token);\n                console.log('Token saved in localStorage');\n            }\n            return responseData;\n        } catch (error) {\n            console.error('Login error:', error);\n            throw error;\n        }\n    },\n    async getUserData () {\n        console.log('Fetching user data...');\n        const token = localStorage.getItem('access_token');\n        if (!token) {\n            throw new Error('Токен доступа не найден');\n        }\n        const response = await fetch(\"\".concat(API_URL, \"/v1/auth/me\"), {\n            method: 'GET',\n            headers: {\n                'Authorization': \"Bearer \".concat(token),\n                'Content-Type': 'application/json'\n            }\n        });\n        console.log('Response status:', response.status);\n        if (!response.ok) {\n            console.error('Failed to fetch user data:', response.status);\n            if (response.status === 401) {\n                // Если токен недействителен, удаляем его\n                localStorage.removeItem('access_token');\n                throw new Error('Сессия истекла. Пожалуйста, войдите снова.');\n            }\n            throw new Error('Не удалось получить данные пользователя');\n        }\n        return response.json();\n    },\n    async getCategories () {\n        console.log('Fetching categories...');\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/categories/\"), {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to fetch categories');\n            }\n            const data = await response.json();\n            console.log('Categories received:', data);\n            return data;\n        } catch (error) {\n            console.error('Error fetching categories:', error);\n            throw error;\n        }\n    },\n    async getBooksByCategory (slug) {\n        console.log('Fetching books for category:', slug);\n        const response = await fetch(\"\".concat(API_URL, \"/v1/books/category/\").concat(slug, \"/\"), {\n            headers: {\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            console.error('Failed to fetch books:', response.status);\n            throw new Error('Failed to fetch books');\n        }\n        const data = await response.json();\n        console.log('Books received:', data);\n        return data;\n    },\n    async getLatestBooks () {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 4;\n        console.log('Fetching latest books with limit:', limit);\n        const url = \"\".concat(API_URL, \"/v1/books/?skip=0&limit=\").concat(limit);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to fetch latest books');\n            }\n            return data;\n        } catch (error) {\n            console.error('Error fetching latest books:', error);\n            throw error;\n        }\n    },\n    async getBookById (id) {\n        console.log('Fetching book with ID:', id);\n        const url = \"\".concat(API_URL, \"/v1/books/\").concat(id);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to fetch book');\n            }\n            return data;\n        } catch (error) {\n            console.error('Error fetching book:', error);\n            throw error;\n        }\n    },\n    async getBookReviews (bookId) {\n        console.log('Fetching reviews for book:', bookId);\n        const url = \"\".concat(API_URL, \"/v1/reviews/book/\").concat(bookId);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to fetch reviews');\n            }\n            return data;\n        } catch (error) {\n            console.error('Error fetching reviews:', error);\n            throw error;\n        }\n    },\n    async addToFavorites (bookId) {\n        console.log('Adding book to favorites:', bookId);\n        const url = \"\".concat(API_URL, \"/v1/favorites/\").concat(bookId);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to add book to favorites');\n            }\n            return data;\n        } catch (error) {\n            console.error('Error adding book to favorites:', error);\n            throw error;\n        }\n    },\n    async removeFromFavorites (bookId) {\n        console.log('Removing book from favorites:', bookId);\n        const url = \"\".concat(API_URL, \"/v1/favorites/\").concat(bookId);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to remove book from favorites');\n            }\n        } catch (error) {\n            console.error('Error removing book from favorites:', error);\n            throw error;\n        }\n    },\n    async checkFavoriteStatus (bookId) {\n        console.log('Checking favorite status for book:', bookId);\n        const url = \"\".concat(API_URL, \"/v1/favorites/check/\").concat(bookId);\n        console.log('Request URL:', url);\n        console.log('Request headers:', {\n            'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n            'Content-Type': 'application/json'\n        });\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('Response status:', response.status);\n            const data = await response.json();\n            console.log('Response data:', data);\n            if (!response.ok) {\n                throw new Error(data.detail || 'Failed to check favorite status');\n            }\n            return data.is_favorited;\n        } catch (error) {\n            console.error('Error checking favorite status:', error);\n            throw error;\n        }\n    },\n    async getUserFavorites () {\n        const url = \"\".concat(API_URL, \"/v1/favorites/\");\n        console.log('Fetching user favorites from:', url);\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to fetch favorites');\n        }\n        return response.json();\n    },\n    async getReviews () {\n        let skip = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        console.log('Fetching reviews...');\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/?skip=\").concat(skip, \"&limit=\").concat(limit), {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to fetch reviews');\n            }\n            const data = await response.json();\n            console.log('Reviews received:', data);\n            return data;\n        } catch (error) {\n            console.error('Error fetching reviews:', error);\n            throw error;\n        }\n    },\n    async getReviewById (reviewId) {\n        console.log('Fetching review by ID:', reviewId);\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/\").concat(reviewId), {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to fetch review');\n            }\n            const data = await response.json();\n            console.log('Review received:', data);\n            return data;\n        } catch (error) {\n            console.error('Error fetching review:', error);\n            throw error;\n        }\n    },\n    async getUserById (userId) {\n        console.log('Fetching user info for ID:', userId);\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/auth/\").concat(userId), {\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to fetch user info');\n            }\n            const data = await response.json();\n            console.log('User info received:', data);\n            return data;\n        } catch (error) {\n            console.error('Error fetching user info:', error);\n            throw error;\n        }\n    },\n    async addComment (reviewId, content) {\n        console.log('Adding comment to review:', reviewId);\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/\").concat(reviewId, \"/comments\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    content\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to add comment');\n            }\n            const data = await response.json();\n            console.log('Comment added:', data);\n            return data;\n        } catch (error) {\n            console.error('Error adding comment:', error);\n            throw error;\n        }\n    },\n    async updateComment (commentId, content) {\n        console.log('Updating comment:', commentId);\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/comments/\").concat(commentId), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    content\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to update comment');\n            }\n            const data = await response.json();\n            console.log('Comment updated:', data);\n            return data;\n        } catch (error) {\n            console.error('Error updating comment:', error);\n            throw error;\n        }\n    },\n    async deleteComment (commentId) {\n        console.log('Deleting comment:', commentId);\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/comments/\").concat(commentId), {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.detail || 'Failed to delete comment');\n            }\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n            throw error;\n        }\n    },\n    async createReview (data) {\n        const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token'))\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to create review');\n        }\n        return response.json();\n    },\n    async updateReview (reviewId, data) {\n        const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/\").concat(reviewId), {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token'))\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to update review');\n        }\n        return response.json();\n    },\n    async deleteReview (reviewId) {\n        const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/\").concat(reviewId), {\n            method: 'DELETE',\n            headers: {\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token'))\n            }\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to delete review');\n        }\n    },\n    async getUserReviews (userId) {\n        const response = await fetch(\"\".concat(API_URL, \"/v1/reviews/user/\").concat(userId), {\n            method: 'GET',\n            headers: {\n                'Authorization': \"Bearer \".concat(localStorage.getItem('access_token')),\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to fetch user reviews');\n        }\n        return response.json();\n    },\n    async adminLogin (accessKey) {\n        console.log('Sending admin login request...');\n        try {\n            const response = await fetch(\"\".concat(API_URL, \"/v1/auth/admin/login\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    access_key: accessKey\n                })\n            });\n            console.log('Response status:', response.status);\n            const responseData = await response.json();\n            console.log('Response data:', responseData);\n            if (!response.ok) {\n                throw new Error(responseData.detail || 'Ошибка при входе админа');\n            }\n            if (responseData.access_token) {\n                localStorage.setItem('access_token', responseData.access_token);\n                console.log('Admin token saved in localStorage');\n            }\n            return responseData;\n        } catch (error) {\n            console.error('Admin login error:', error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});